attach(df)
wdsp<-as.numeric(df$wdsp)
wdsp<-na.omit(wdsp)
wdsp<-data.frame(wdsp)
# periods = 24 hours in a day
AnomalyDetectionVec(wdsp, max_anoms=0.05, period=24, direction='pos', only_last=FALSE, plot=TRUE)
AnomalyDetectionVec(wdsp, max_anoms=0.05, period=24, direction='neg', only_last=FALSE, plot=TRUE)
install.packages("dtw")
# install.packages("dtw")
library(dtw)
data(aami3a)
data(aami3b)
aami3a
aami3b
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b)   ,end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# install.packages("dtw")
library(dtw)
data(aami3a)
data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
countPaths(d, debug = FALSE)
countPaths(data_query, debug = FALSE)
# install.packages("dtw")
library(dtw)
data(aami3a)
data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, dist.method = "Euclidean", keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
data_query
data_reference
data(aami3a)
aami3a
aami3b
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
# alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment <- dtw(x, y, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
class(x)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
x=as.numeric(x)
y=as.numeric(y)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
# alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment <- dtw(x, y, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# devtools::install_github("twitter/AnomalyDetection")
library(AnomalyDetection)
mydata<-read.csv("dublin-hourly-weather-data.csv")
attach(mydata)
df<-data.frame(date,wdsp)
attach(df)
wdsp<-as.numeric(df$wdsp)
wdsp<-na.omit(wdsp)
wdsp<-data.frame(wdsp)
wdsp<-wdsp[1:4000,]
# periods = 24 hours
AnomalyDetectionVec(wdsp, max_anoms=0.05, period=24, direction='pos', only_last=FALSE, plot=TRUE)
devtools::install_github("twitter/AnomalyDetection")
install.packages("devtools")
library(AnomalyDetection)
mydata<-read.csv("dublin-hourly-weather-data.csv")
attach(mydata)
df<-data.frame(date,wdsp)
attach(df)
wdsp<-as.numeric(df$wdsp)
wdsp<-na.omit(wdsp)
wdsp<-data.frame(wdsp)
wdsp<-wdsp[1:4000,]
# periods = 24 hours
AnomalyDetectionVec(wdsp, max_anoms=0.05, period=24, direction='pos', only_last=FALSE, plot=TRUE)
library(plotly)
country<-c("Sweden", "Ireland", "Netherlands", "United Kingdom", "Germany")
incometax<-c(61.85,48.00,52.00,45.00,47.50)
corporatetax<-c(22.00,12.50,25.00,19.00,29.79)
inflation<-c(2.00,0.60,2.00,2.30,1.70)
data<-data.frame(country,incometax,corporatetax,inflation)
p <- plot_ly(data, x = ~incometax, y = ~inflation, text = ~country, type = 'scatter', mode = 'markers',
marker = list(size = ~corporatetax, opacity = 0.5, color = 'rgb(255, 65, 54)')) %>%
layout(title = 'Economic Indicators',
xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE))
p
install.packages("plotly")
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
View(lcm)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b))#, end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
View(lcm)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
View(lcm)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b))
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
plot(y ~ x)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
plot(aami3b ~ aami3a)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
plot(aami3b ~ aami3a)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b[1:43081]), end=10)
)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
plot(aami3b[1:43081] ~ aami3a)
# install.packages("dtw")
library(dtw)
x=data(aami3a,start=0,end=2)
y=data(aami3b,start=2.7,end=5)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
ref <- window(aami3a,start=0,end=2)
test <- window(aami3a,start=2.7,end=5)
plot(dtw(test,ref,k=TRUE),type="two",off=1,match.lty=2,match.indices=20)
# install.packages("dtw")
library(dtw)
x=data(aami3a)
y=data(aami3b)
ref <- window(aami3a,start=0,end=2)
test <- window(aami3a,start=2.7,end=5)
plot(dtw(test,ref,k=TRUE),type="two",off=1,match.lty=2,match.indices=20)
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(aami3a,aami3b), end=10)
)
data_reference <- 1:50
data_query <- seq(1,50,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
# install.packages("dtw")
library(dtw)
# https://www.datatechnotes.com/2018/11/dynamic-time-warping-example-in-r.html
n <- 200
a <- sin(seq(0,4*pi, len = n)) + runif(n)/5
b <- cos(seq(-pi,3*pi, len = n)) + runif(n)/5
plot(a, type = "l")
lines(b, col = "blue")
align <- dtw(a, b, keep = T)
dtwPlotTwoWay(align)
dtwPlotDensity(align)
# install.packages("dtw")
library(dtw)
n <- 200
a <- sin(seq(0,4*pi, len = n)) + runif(n)/5
b <- cos(seq(-pi,3*pi, len = n)) + runif(n)/5
plot(a, type='l')
plot(b, type='l')
n <- 200
a <- sin(seq(0,4*pi, len = n)) + runif(n)/5
b <- cos(seq(-pi,3*pi, len = n)) + runif(n)/5
## A noisy sine wave as query
idx<-seq(0,6.28,len=100);
query<-sin(idx)+runif(100)/10;
## A cosine is for template; sin and cos are offset by 25 samples
template<-cos(idx)
## Find the best match with the canonical recursion formula
library(dtw);
alignment<-dtw(query,template,keep=TRUE);
## Display the warping curve, i.e. the alignment curve
plot(alignment,type="threeway")
## Align and plot with the Rabiner-Juang type VI-c unsmoothed recursion
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
## See the recursion relation, as formula and diagram
rabinerJuangStepPattern(6,"c")
plot(rabinerJuangStepPattern(6,"c"))
# Load Systematic Investor Toolbox (SIT)
# http://systematicinvestor.wordpress.com/systematic-investor-toolbox/
###############################################################################
con = gzcon(url('http://www.systematicportfolio.com/sit.gz', 'rb'))
source(con)
close(con)
#*****************************************************************
# Load historical data
#******************************************************************
load.packages('quantmod')
tickers = 'SPY'
data = getSymbols(tickers, src = 'yahoo', from = '1950-01-01', auto.assign = F)
#*****************************************************************
# Euclidean distance, one to one mapping
#******************************************************************
obj = bt.matching.find(Cl(data), normalize.fn = normalize.mean, dist.fn = 'dist.euclidean', plot=T)
matches = bt.matching.overlay(obj, plot.index=1:90, plot=T)
layout(1:2)
matches = bt.matching.overlay(obj, plot=T, layout=T)
bt.matching.overlay.table(obj, matches, plot=T, layout=T)
## A noisy sine wave as query
idx<-seq(0,6.28,len=100);
query<-sin(idx)+runif(100)/10;
## A cosine is for template; sin and cos are offset by 25 samples
template<-cos(idx)
## Find the best match with the canonical recursion formula
library(dtw);
alignment<-dtw(query,template,keep=TRUE);
## Display the warping curve, i.e. the alignment curve
plot(alignment,type="threeway")
## Align and plot with the Rabiner-Juang type VI-c unsmoothed recursion
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
## See the recursion relation, as formula and diagram
rabinerJuangStepPattern(6,"c")
plot(rabinerJuangStepPattern(6,"c"))
## A noisy sine wave as query
idx<-seq(0,6.28,len=100);
query<-sin(idx)+runif(100)/10;
## A cosine is for template; sin and cos are offset by 25 samples
template<-cos(idx)
## Find the best match with the canonical recursion formula
library(dtw);
alignment<-dtw(query,template,keep=TRUE);
## Display the warping curve, i.e. the alignment curve
plot(alignment,type="threeway")
## Align and plot with the Rabiner-Juang type VI-c unsmoothed recursion
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
## See the recursion relation, as formula and diagram
rabinerJuangStepPattern(6,"c")
plot(rabinerJuangStepPattern(6,"c"))
setwd('/media/veracrypt9/group b/computing/github/current/hotel-modelling/notebooks and datasets/tensorflow/tf-keras')
h1<-read.csv('h1weekly.csv')
h2<-read.csv('h2weekly.csv')
View(h1)
idx<-seq(0,6.28,len=100);
query<-sin(idx)+runif(100)/10;
## A cosine is for template; sin and cos are offset by 25 samples
template<-cos(idx)
## Find the best match with the canonical recursion formula
library(dtw);
alignment<-dtw(query,template,keep=TRUE);
## Display the warping curve, i.e. the alignment curve
plot(alignment,type="threeway")
## Align and plot with the Rabiner-Juang type VI-c unsmoothed recursion
plot(
dtw(query,template,keep=TRUE,
step=rabinerJuangStepPattern(6,"c")),
type="twoway",offset=-2);
## See the recursion relation, as formula and diagram
rabinerJuangStepPattern(6,"c")
plot(rabinerJuangStepPattern(6,"c"))
library(dtw)
setwd('/media/veracrypt9/group b/computing/github/current/hotel-modelling/notebooks and datasets/tensorflow/tf-keras')
h1<-read.csv('h1weekly.csv')
h2<-read.csv('h2weekly.csv')
t1<-h1$IsCanceled
t2<-h2$IsCanceled
ref <- window(t1,start=0,end=2)
test <- window(t2,start=2.7,end=5)
plot(dtw(test,ref,k=TRUE),type="two",off=1,match.lty=2,match.indices=20)
View(h1)
View(h2)
library(dtw)
setwd('/media/veracrypt9/group b/computing/github/current/hotel-modelling/notebooks and datasets/tensorflow/tf-keras')
h1<-read.csv('h1weekly.csv')
h2<-read.csv('h2weekly.csv')
t1<-h1$IsCanceled
t2<-h2$IsCanceled
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(t1,t2))
)
data_reference <- 1:600
data_query <- seq(1,600,0.5) + rnorm(30)
alignment <- dtw(x=data_query, y=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
library(dtw)
setwd('/media/veracrypt9/group b/computing/github/current/hotel-modelling/notebooks and datasets/tensorflow/tf-keras')
h1<-read.csv('h1weekly.csv')
h2<-read.csv('h2weekly.csv')
t1<-h1$IsCanceled
t2<-h2$IsCanceled
## Plot both as a multivariate TS object
##  only extract the first 10 seconds
plot( main="ECG (mV)",
window(
cbind(t1,t2))
)
data_reference <- 1:600
data_query <- seq(1,600,0.5) + rnorm(30)
alignment <- dtw(t1=data_query, t2=data_reference, keep=TRUE)
alignment$index1
alignment$index2
lcm <- alignment$costMatrix
image(x=1:nrow(lcm), y=1:ncol(lcm), lcm)
plot(alignment, type="threeway")
